{"mappings":"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","sources":["<anon>","js/script.js","js/constants.js","js/api.js","js/utils.js","js/uiManagement.js"],"sourcesContent":["const $0549f5aaef62b2d2$export$d675b3969e4857cb = document.getElementById('submit-button');\nconst $0549f5aaef62b2d2$export$c11717e3f1c52cf6 = document.getElementById('answers-section');\nconst $0549f5aaef62b2d2$export$b4bb76d1f78cbcea = document.getElementById('tutorial-section');\nconst $0549f5aaef62b2d2$export$16cdf0d7feb4a0fd = document.getElementById('results-section');\nconst $0549f5aaef62b2d2$export$46e4a324ac90507f = document.getElementById('heading');\nconst $0549f5aaef62b2d2$export$27e9b478d743ba2b = 10;\nconst $0549f5aaef62b2d2$export$73c6fd56b5ab9afe = 80;\n\n\n\nconst $73936c209f170d43$export$7f972a3e1c55592f = async (difficulty)=>{\n    const difficultyUrlParam = difficulty === 'mixed' ? '' : `&difficulty=${difficulty}`;\n    try {\n        // Fetch based on selected difficulty using url parameter\n        const result = await fetch(`https://opentdb.com/api.php?amount=${(0, $0549f5aaef62b2d2$export$27e9b478d743ba2b)}&category=12&type=multiple${difficultyUrlParam}`);\n        const json = await result.json();\n        return json;\n    } catch (error) {\n        // Handling data fetch error\n        alert('Failed to fetch questions from Open Trivia Database. Refresh and try again');\n        console.error('Failed to fetch data with Trivia API', error);\n    }\n};\nconst $73936c209f170d43$export$a1f999b7bd8ac1f5 = 5000; //ms\n\n\n// Decode html entities present in data (function learnt from chatGPT)\nconst $08fa37fff71de28c$export$5cfeaa4af6841c8f = (str)=>{\n    const parser = new DOMParser();\n    const decoded = parser.parseFromString(str, 'text/html').body.textContent;\n    return decoded;\n};\nconst $08fa37fff71de28c$export$448332262467e042 = (array)=>{\n    for(let i = array.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [\n            array[j],\n            array[i]\n        ];\n    }\n    return array;\n};\n\n\n// Function to deactivate all answer buttons\nconst $221d103b0f3fc88a$export$af068a137c14e57e = ()=>{\n    for(let i = 0; i <= 3; i++)document.getElementById(`answer-${i}`).classList.add('disabled');\n};\nconst $221d103b0f3fc88a$export$855675447ae9024f = ()=>{\n    for(let i = 0; i <= 3; i++)document.getElementById(`answer-${i}`).classList.remove('disabled');\n};\nconst $221d103b0f3fc88a$export$7411639aeb86346d = ()=>{\n    // Make main's border red\n    document.getElementById('main').classList.add('red');\n    // Make note symbols red\n    const symbols = document.getElementsByClassName('symbol');\n    for (let symbol of symbols)symbol.src = 'assets/images/musicquiz-red.png';\n    // Make quiz title red\n    const titles = document.getElementsByClassName('title');\n    for (let title of titles)title.classList.add('red');\n};\nconst $221d103b0f3fc88a$export$678377686716f801 = ()=>{\n    document.getElementById('main').classList.remove('red');\n    // Revert note symbols to green\n    const symbols = document.getElementsByClassName('symbol');\n    for (let symbol of symbols)symbol.src = 'assets/images/musicquiz-green.png';\n    // Revert quiz title\n    const titles = document.getElementsByClassName('title');\n    for (let title of titles)title.classList.remove('red');\n};\nconst $221d103b0f3fc88a$export$bfa134de10c25d69 = (selectedDifficultyIdx)=>{\n    for(let i = 0; i <= 3; i++)if (i !== selectedDifficultyIdx) document.getElementById(`difficulty-${i}`).classList.remove('selected');\n};\n\n\nlet $63eb283d27decb4d$var$data = {};\nlet $63eb283d27decb4d$var$questionCount = 0;\nlet $63eb283d27decb4d$var$score = 0;\nlet $63eb283d27decb4d$var$correctAnswerIdx = null;\nlet $63eb283d27decb4d$var$difficulty = 'mixed';\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Making sure more than 5 seconds passed since the last data fetch\n    // Trivia API is limited at 1 fetch every 5 seconds\n    const msSinceLastFetch = new Date() - Date.parse(localStorage.getItem('fetchTime'));\n    if (msSinceLastFetch <= (0, $73936c209f170d43$export$a1f999b7bd8ac1f5)) {\n        // Disable submit button and display 'loading' while fetching data\n        (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).classList.add('disabled');\n        (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText = 'Loading...';\n        setTimeout(()=>{\n            // Enable submit button once the data was fetched\n            (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).classList.remove('disabled');\n            (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText = 'Start';\n        }, (0, $73936c209f170d43$export$a1f999b7bd8ac1f5) - msSinceLastFetch + 500);\n    }\n    // Handle click on the submitButton\n    (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).addEventListener('click', ()=>{\n        // Don't do anything if button has the class disabled\n        if ((0, $0549f5aaef62b2d2$export$d675b3969e4857cb).classList.contains('disabled')) return;\n        if ($63eb283d27decb4d$var$questionCount === 0 || (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText === 'Start') // Start quiz if questions count hasn't started\n        $63eb283d27decb4d$var$startQuiz();\n        else if ($63eb283d27decb4d$var$questionCount === (0, $0549f5aaef62b2d2$export$27e9b478d743ba2b)) // Finish quiz if question count is at the last question\n        $63eb283d27decb4d$var$finishQuiz();\n        else if ($63eb283d27decb4d$var$questionCount > (0, $0549f5aaef62b2d2$export$27e9b478d743ba2b)) // Restart quiz if question count is bigger than the last question\n        $63eb283d27decb4d$var$restartQuiz();\n        else // Otherwise, go to next question\n        $63eb283d27decb4d$var$nextQuestion();\n        // Reset red UI ever time submit button is clicked\n        (0, $221d103b0f3fc88a$export$678377686716f801)();\n    });\n    // Handle selecting an answer\n    for(let i = 0; i <= 3; i++){\n        const selectedAnswer = document.getElementById(`answer-${i}`);\n        selectedAnswer.addEventListener('click', ()=>{\n            // Check that button is not disabled (which is the case when an answer was already selected)\n            if (!selectedAnswer.classList.contains('disabled')) {\n                if (i === $63eb283d27decb4d$var$correctAnswerIdx) {\n                    selectedAnswer.classList.add('correct', 'selected');\n                    $63eb283d27decb4d$var$score += 1;\n                } else {\n                    selectedAnswer.classList.add('incorrect', 'selected');\n                    document.getElementById(`answer-${$63eb283d27decb4d$var$correctAnswerIdx}`).classList.add('correct');\n                    // Make more elements of the UI red to signal the wrong answer\n                    (0, $221d103b0f3fc88a$export$7411639aeb86346d)();\n                }\n                // Deactivate all other answer buttons, so a second answer can't be selected\n                (0, $221d103b0f3fc88a$export$af068a137c14e57e)();\n                // Activate submitButton to navigate to the next question\n                (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).classList.remove('disabled');\n            }\n        });\n    }\n    // Handle selecting difficulty\n    for(let i = 0; i <= 3; i++){\n        const difficultyOption = document.getElementById(`difficulty-${i}`);\n        difficultyOption.addEventListener('click', ()=>{\n            difficultyOption.classList.add('selected');\n            // Deselect all other difficulties\n            (0, $221d103b0f3fc88a$export$bfa134de10c25d69)(i);\n            // Save selected difficulty\n            $63eb283d27decb4d$var$difficulty = difficultyOption.textContent.toLowerCase();\n        });\n    }\n});\n// Function to start quiz, from the tutorial page\nconst $63eb283d27decb4d$var$startQuiz = async ()=>{\n    // Record time right before fetch (to handle the limitation of 1 request every 5 seconds)\n    localStorage.setItem('fetchTime', new Date());\n    // Fetch questions from Trivia API\n    $63eb283d27decb4d$var$data = await (0, $73936c209f170d43$export$7f972a3e1c55592f)($63eb283d27decb4d$var$difficulty);\n    (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText = 'Next';\n    // Hide the tutorial\n    (0, $0549f5aaef62b2d2$export$b4bb76d1f78cbcea).classList.add('hidden');\n    // Show the first question\n    (0, $0549f5aaef62b2d2$export$c11717e3f1c52cf6).classList.remove('hidden');\n    // Populate question\n    $63eb283d27decb4d$var$nextQuestion();\n};\n// Function to finish last quiz question and view final score\nconst $63eb283d27decb4d$var$finishQuiz = ()=>{\n    // Update heading to results\n    (0, $0549f5aaef62b2d2$export$46e4a324ac90507f).innerText = 'You scored';\n    // Hide answers section, display results section\n    (0, $0549f5aaef62b2d2$export$c11717e3f1c52cf6).classList.add('hidden');\n    (0, $0549f5aaef62b2d2$export$16cdf0d7feb4a0fd).classList.remove('hidden');\n    // Display score\n    document.getElementById('score').innerText = $63eb283d27decb4d$var$score + ` point${$63eb283d27decb4d$var$score > 1 ? 's' : ''}`;\n    // Update submit button\n    (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText = 'Restart quiz';\n    // Increase question count\n    $63eb283d27decb4d$var$questionCount += 1;\n};\n// Function to populate the next question\nconst $63eb283d27decb4d$var$nextQuestion = ()=>{\n    // Get question object from data\n    const questionObject = $63eb283d27decb4d$var$data.results[$63eb283d27decb4d$var$questionCount];\n    $63eb283d27decb4d$var$questionCount += 1;\n    // Update heading with question text (function learnt from chatGPT)\n    const questionText = (0, $08fa37fff71de28c$export$5cfeaa4af6841c8f)(questionObject.question);\n    (0, $0549f5aaef62b2d2$export$46e4a324ac90507f).innerText = $63eb283d27decb4d$var$questionCount + '. ' + questionText;\n    if (questionText.length > (0, $0549f5aaef62b2d2$export$73c6fd56b5ab9afe)) document.getElementById('heading').classList.add('shrink');\n    // Populate answer buttons, randomising the placement of the correct answer\n    // Shuffle answers\n    let answers = (0, $08fa37fff71de28c$export$448332262467e042)([\n        ...questionObject.incorrect_answers,\n        questionObject.correct_answer\n    ]);\n    for(let i = 0; i <= 3; i++){\n        const answerButton = document.getElementById(`answer-${i}`);\n        // Reset answer button status\n        answerButton.classList.remove('correct', 'incorrect', 'selected');\n        // Save correct answer index\n        if (answers[i] === questionObject.correct_answer) $63eb283d27decb4d$var$correctAnswerIdx = i;\n        // Hide button if there are fewer than 4 answers provided\n        if (!answers[i]) answerButton.hidden = 'true';\n        // Populate text on button\n        answerButton.innerText = (0, $08fa37fff71de28c$export$5cfeaa4af6841c8f)(answers[i]);\n    }\n    // Re-enable all answer buttons\n    (0, $221d103b0f3fc88a$export$855675447ae9024f)();\n    // Disable submit button until user selects an answer\n    (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).classList.add('disabled');\n    // Change submit button to finish on last question\n    if ($63eb283d27decb4d$var$questionCount === (0, $0549f5aaef62b2d2$export$27e9b478d743ba2b)) (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText = 'Finish';\n};\n// Function to restart quiz, from score page\nconst $63eb283d27decb4d$var$restartQuiz = ()=>{\n    // Reset question count and score\n    $63eb283d27decb4d$var$questionCount = 0;\n    $63eb283d27decb4d$var$score = 0;\n    // Populate content to display the tutorial\n    (0, $0549f5aaef62b2d2$export$d675b3969e4857cb).innerText = 'Start';\n    (0, $0549f5aaef62b2d2$export$46e4a324ac90507f).innerText = 'How to play';\n    (0, $0549f5aaef62b2d2$export$16cdf0d7feb4a0fd).classList.add('hidden');\n    (0, $0549f5aaef62b2d2$export$b4bb76d1f78cbcea).classList.remove('hidden');\n};\n\n\n//# sourceMappingURL=index.a4eb644d.js.map\n","import { \n    answersSection, tutorialSection, resultsSection,\n    heading, submitButton,\n    MAX_QUESTION_NUM,\n    LONG_QUESTION_LENGTH,\n} from './constants.js';\nimport { fetchQuestionsFromTriviaAPI, MIN_FETCH_INTERVAL } from './api.js';\nimport { decodeHtmlEntities, shuffle } from './utils.js';\nimport { \n    deactivateAllAnswerButtons, activateAllAnswerButtons, \n    makeUiRed, clearRedUi, \n    deselectOtherDifficultyOptions \n} from './uiManagement.js';\n\nlet data = {};\nlet questionCount = 0;\nlet score = 0;\nlet correctAnswerIdx = null;\nlet difficulty = 'mixed';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    // Making sure more than 5 seconds passed since the last data fetch\n    // Trivia API is limited at 1 fetch every 5 seconds\n    const msSinceLastFetch = new Date() - Date.parse(localStorage.getItem('fetchTime'));\n    if (msSinceLastFetch <= MIN_FETCH_INTERVAL) {\n        // Disable submit button and display 'loading' while fetching data\n        submitButton.classList.add('disabled');\n        submitButton.innerText = 'Loading...';\n        setTimeout(() => {\n            // Enable submit button once the data was fetched\n            submitButton.classList.remove('disabled');\n            submitButton.innerText = 'Start';\n        }, MIN_FETCH_INTERVAL - msSinceLastFetch + 500);\n    }\n\n    // Handle click on the submitButton\n    submitButton.addEventListener('click', () => {\n        // Don't do anything if button has the class disabled\n        if (submitButton.classList.contains('disabled')) {\n            return;\n        }\n        if (questionCount === 0 || submitButton.innerText === 'Start') {\n            // Start quiz if questions count hasn't started\n            startQuiz();\n        } else if (questionCount === MAX_QUESTION_NUM) {\n            // Finish quiz if question count is at the last question\n            finishQuiz();\n        } else if (questionCount > MAX_QUESTION_NUM) {\n            // Restart quiz if question count is bigger than the last question\n            restartQuiz();\n        } else {\n            // Otherwise, go to next question\n            nextQuestion();\n        }\n        // Reset red UI ever time submit button is clicked\n        clearRedUi();\n    });\n\n    // Handle selecting an answer\n    for (let i = 0; i <= 3; i++) {\n        const selectedAnswer = document.getElementById(`answer-${i}`);\n        selectedAnswer.addEventListener('click', () => {\n            // Check that button is not disabled (which is the case when an answer was already selected)\n            if (!selectedAnswer.classList.contains('disabled')) {\n                if (i === correctAnswerIdx) {\n                    selectedAnswer.classList.add('correct', 'selected');\n                    score += 1;\n                } else {\n                    selectedAnswer.classList.add('incorrect', 'selected');\n                    document.getElementById(`answer-${correctAnswerIdx}`).classList.add('correct');\n                    // Make more elements of the UI red to signal the wrong answer\n                    makeUiRed();\n                }\n                // Deactivate all other answer buttons, so a second answer can't be selected\n                deactivateAllAnswerButtons();\n                // Activate submitButton to navigate to the next question\n                submitButton.classList.remove('disabled');\n            }\n        });\n    }\n\n    // Handle selecting difficulty\n    for(let i = 0; i <= 3; i++) {\n        const difficultyOption = document.getElementById(`difficulty-${i}`);\n        difficultyOption.addEventListener('click', () => {\n            difficultyOption.classList.add('selected');\n            // Deselect all other difficulties\n            deselectOtherDifficultyOptions(i);\n            // Save selected difficulty\n            difficulty = difficultyOption.textContent.toLowerCase();\n        });\n    }\n});\n\n// Function to start quiz, from the tutorial page\nconst startQuiz = async () => {\n    // Record time right before fetch (to handle the limitation of 1 request every 5 seconds)\n    localStorage.setItem('fetchTime', new Date());\n    // Fetch questions from Trivia API\n    data = await fetchQuestionsFromTriviaAPI(difficulty);\n    submitButton.innerText = 'Next';\n    // Hide the tutorial\n    tutorialSection.classList.add('hidden');\n    // Show the first question\n    answersSection.classList.remove('hidden');\n    // Populate question\n    nextQuestion();\n};\n\n// Function to finish last quiz question and view final score\nconst finishQuiz = () => {\n    // Update heading to results\n    heading.innerText = 'You scored';\n    // Hide answers section, display results section\n    answersSection.classList.add('hidden');\n    resultsSection.classList.remove('hidden');\n    // Display score\n    document.getElementById('score').innerText = score + ` point${score > 1 ? 's' : ''}`;\n    // Update submit button\n    submitButton.innerText = 'Restart quiz';\n    // Increase question count\n    questionCount += 1;\n};\n\n// Function to populate the next question\nconst nextQuestion = () => {\n    // Get question object from data\n    const questionObject = data.results[questionCount];\n    questionCount += 1;\n\n    // Update heading with question text (function learnt from chatGPT)\n    const questionText = decodeHtmlEntities(questionObject.question);\n    heading.innerText = questionCount + '. ' + questionText;\n    if (questionText.length > LONG_QUESTION_LENGTH) {\n        document.getElementById('heading').classList.add('shrink');\n    }\n\n    // Populate answer buttons, randomising the placement of the correct answer\n    // Shuffle answers\n    let answers = shuffle([...questionObject.incorrect_answers, questionObject.correct_answer]);\n    for (let i = 0; i <= 3; i++) {\n        const answerButton = document.getElementById(`answer-${i}`);\n        // Reset answer button status\n        answerButton.classList.remove('correct', 'incorrect', 'selected');\n        // Save correct answer index\n        if (answers[i] === questionObject.correct_answer) {\n            correctAnswerIdx = i;\n        }\n        // Hide button if there are fewer than 4 answers provided\n        if (!answers[i]) {\n            answerButton.hidden = 'true';\n        }\n        // Populate text on button\n        answerButton.innerText = decodeHtmlEntities(answers[i]);\n    }\n    // Re-enable all answer buttons\n    activateAllAnswerButtons();\n    // Disable submit button until user selects an answer\n    submitButton.classList.add('disabled');\n    // Change submit button to finish on last question\n    if (questionCount === MAX_QUESTION_NUM) {\n        submitButton.innerText = 'Finish';\n    }\n};\n\n// Function to restart quiz, from score page\nconst restartQuiz = () => {\n    // Reset question count and score\n    questionCount = 0;\n    score = 0;\n    // Populate content to display the tutorial\n    submitButton.innerText = 'Start';\n    heading.innerText = 'How to play';\n    resultsSection.classList.add('hidden');\n    tutorialSection.classList.remove('hidden');\n};","export const submitButton = document.getElementById('submit-button');\nexport const answersSection = document.getElementById('answers-section');\nexport const tutorialSection = document.getElementById('tutorial-section');\nexport const resultsSection = document.getElementById('results-section');\nexport const heading = document.getElementById('heading');\n\nexport const MAX_QUESTION_NUM = 10;\nexport const LONG_QUESTION_LENGTH = 80;","import { MAX_QUESTION_NUM } from './constants.js';\n\nexport const fetchQuestionsFromTriviaAPI = async (difficulty) => {\n    const difficultyUrlParam = difficulty === 'mixed' ? '' : `&difficulty=${difficulty}`;\n    try {\n        // Fetch based on selected difficulty using url parameter\n        const result = await fetch(`https://opentdb.com/api.php?amount=${MAX_QUESTION_NUM}&category=12&type=multiple${difficultyUrlParam}`);\n        const json = await result.json();\n        return json;\n    } catch (error) {\n        // Handling data fetch error\n        alert('Failed to fetch questions from Open Trivia Database. Refresh and try again');\n        console.error('Failed to fetch data with Trivia API', error);\n    }\n};\n\nexport const MIN_FETCH_INTERVAL = 5000; //ms","// Decode html entities present in data (function learnt from chatGPT)\nexport const decodeHtmlEntities = (str) => {\n    const parser = new DOMParser();\n    const decoded = parser.parseFromString(str, 'text/html').body.textContent;\n    return decoded;\n};\n\n// Function to shuffle array (Fisher Yates)\n// https://www.freecodecamp.org/news/how-to-shuffle-an-array-of-items-using-javascript-or-typescript/\nexport const shuffle = (array) => { \n  for (let i = array.length - 1; i > 0; i--) { \n    const j = Math.floor(Math.random() * (i + 1)); \n    [array[i], array[j]] = [array[j], array[i]]; \n  } \n  return array; \n}; ","// Function to deactivate all answer buttons\nexport const deactivateAllAnswerButtons = () => {\n    for (let i = 0; i <= 3; i++) {\n        document.getElementById(`answer-${i}`).classList.add('disabled');\n    }\n};\n\n// Function to activate all answer buttons\nexport const activateAllAnswerButtons = () => {\n    for (let i = 0; i <= 3; i++) {\n        document.getElementById(`answer-${i}`).classList.remove('disabled');\n    }\n};\n\n// Function to make UI elements red to signal wrong answer\nexport const makeUiRed = () => {\n    // Make main's border red\n    document.getElementById('main').classList.add('red');\n    // Make note symbols red\n    const symbols = document.getElementsByClassName('symbol');\n    for (let symbol of symbols) {\n        symbol.src = 'assets/images/musicquiz-red.png';\n    }\n    // Make quiz title red\n    const titles = document.getElementsByClassName('title');\n    for (let title of titles) {\n        title.classList.add('red');\n    }\n};\n\n// Function to clear red UI elements when moving to a new question\nexport const clearRedUi = () => {\n    document.getElementById('main').classList.remove('red');\n    // Revert note symbols to green\n    const symbols = document.getElementsByClassName('symbol');\n    for (let symbol of symbols) {\n        symbol.src = 'assets/images/musicquiz-green.png';\n    }\n    // Revert quiz title\n    const titles = document.getElementsByClassName('title');\n    for (let title of titles) {\n        title.classList.remove('red');\n    }\n};\n\n// Function to deselect other difficulty options when selecting one\nexport const deselectOtherDifficultyOptions = (selectedDifficultyIdx) => {\n    for (let i = 0; i <= 3; i++) {\n        if (i !== selectedDifficultyIdx) {\n            document.getElementById(`difficulty-${i}`).classList.remove('selected');\n        }\n    }\n};"],"names":["$0549f5aaef62b2d2$export$d675b3969e4857cb","document","getElementById","$0549f5aaef62b2d2$export$c11717e3f1c52cf6","$0549f5aaef62b2d2$export$b4bb76d1f78cbcea","$0549f5aaef62b2d2$export$16cdf0d7feb4a0fd","$0549f5aaef62b2d2$export$46e4a324ac90507f","$73936c209f170d43$export$7f972a3e1c55592f","difficulty","difficultyUrlParam","result","fetch","json","error","alert","console","$08fa37fff71de28c$export$5cfeaa4af6841c8f","str","parser","DOMParser","parseFromString","body","textContent","$08fa37fff71de28c$export$448332262467e042","array","i","length","j","Math","floor","random","$221d103b0f3fc88a$export$af068a137c14e57e","classList","add","$221d103b0f3fc88a$export$855675447ae9024f","remove","$221d103b0f3fc88a$export$7411639aeb86346d","symbol","getElementsByClassName","src","title","$221d103b0f3fc88a$export$678377686716f801","$221d103b0f3fc88a$export$bfa134de10c25d69","selectedDifficultyIdx","$63eb283d27decb4d$var$data","$63eb283d27decb4d$var$questionCount","$63eb283d27decb4d$var$score","$63eb283d27decb4d$var$correctAnswerIdx","$63eb283d27decb4d$var$difficulty","addEventListener","msSinceLastFetch","Date","parse","localStorage","getItem","innerText","setTimeout","contains","$63eb283d27decb4d$var$startQuiz","$63eb283d27decb4d$var$finishQuiz","$63eb283d27decb4d$var$restartQuiz","$63eb283d27decb4d$var$nextQuestion","selectedAnswer","difficultyOption","toLowerCase","setItem","questionObject","results","questionText","question","answers","incorrect_answers","correct_answer","answerButton","hidden"],"version":3,"file":"index.a4eb644d.js.map"}